package chapter08_Multidimensional_Array;

public class Sudoku_me {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//int[][] sudoku = new int[9][];
		//sudoku[0] = new int[9];
		//sudoku[0] = {9,6,3,1,7,4,2,5,8};
		//int[] sudoku = {9,6,3,1,7,4,2,5,8};
		/*
		int[][] sudoku =
					{{5, 3, 4, 6, 7, 8, 9, 1, 2},
					 {6, 7, 2, 1, 9, 5, 3, 4, 8},
					 {1, 9, 8, 3, 4, 2, 5, 6, 7},
					 {8, 5, 9, 7, 6, 1, 4, 2, 3},
					 {4, 2, 6, 8, 5, 3, 7, 9, 1},
					 {7, 1, 3, 9, 2, 4, 8, 5, 6},
					 {9, 6, 1, 5, 3, 7, 2, 8, 4},
					 {2, 8, 7, 4, 1, 9, 6, 3, 5},
					 {3, 4, 5, 2, 8, 6, 1, 7, 9}
					 };
		*/
		
		int[][] sudoku =
			{{5, 3, 4, 6, 7, 8, 9, 1, 2},
			 {6, 7, 2, 1, 9, 5, 3, 4, 8},
			 {1, 9, 8, 3, 4, 2, 5, 6, 7},
			 {8, 5, 9, 7, 6, 1, 4, 2, 3},
			 {4, 2, 6, 8, 5, 3, 7, 9, 1},
			 {7, 1, 3, 9, 2, 4, 8, 5, 6},
			 {9, 6, 1, 5, 3, 7, 2, 8, 4},
			 {2, 8, 7, 4, 1, 9, 6, 3, 5},
			 {3, 4, 5, 2, 8, 6, 1, 7, 9}
			 };
		
		
		//System.out.println(validRow(sudoku));
		//System.out.println(validColumn(sudoku));
		//System.out.println(validSquare(sudoku));
		System.out.println((validRow(sudoku) && validRow(sudoku) && validSquare(sudoku)) ? "Valid solution" : "Invalid solution");

	}
	public static void print(int[] array) {
		for(int i = 0; i < array.length; i++) {
			System.out.print(array[i]+ " ");
		}
		System.out.println();
	}
	
	public static boolean validSquare(int[][] array) {
		for(int i = 0; i < array.length; i++) {
			for(int j = 0; j < array[i].length; j++) {
				int key = array[i][j];
				int[] arrayCopy = new int[9];
				int row = (i / 3) * 3;
				int col = (j / 3) * 3;
				int colLimit = col + 2;
				
				for(int m = 0; m < arrayCopy.length; m++) {
					arrayCopy[m] = array[row][col];
					
					if(col < colLimit) {
						col++;
					}else {
						col = (j / 3) * 3;
						row++;
					}
				}
				
				int duplicate = 0;
				for(int k = 0; k < arrayCopy.length; k++) {
					if(key == arrayCopy[k]) {
						duplicate++;
					}
				}

				for(int k = 0; k < arrayCopy.length; k++) {
					if(key == arrayCopy[k] && duplicate != 1) {
						return false;
					}
				}
				
			}
		}
		return true;
	}
	
	public static boolean validRow(int[][] array) {
		for(int i = 0; i < array.length; i++) {
			for(int j = 0; j < array[i].length; j++) {
				int key = array[i][j];
				int[] arrayCopy = new int[9];
				System.arraycopy(array[i], 0, arrayCopy, 0, array[i].length);
				for(int k = 0; k < arrayCopy.length; k++) {
					if(key == arrayCopy[k] && j != k) {
						return false;
					}
				}
				
			}
		}
		return true;
	}
	
	public static boolean validColumn(int[][] array) {
		for(int i = 0; i < array.length; i++) {
			for(int j = 0; j < array[i].length; j++) {
				int key = array[i][j];
				int[] arrayCopy = new int[9];
				for(int m = 0; m < arrayCopy.length; m++) {
					arrayCopy[m] = array[m][j];
				}
				for(int k = 0; k < arrayCopy.length; k++) {
					if(key == arrayCopy[k] && i != k) {
						return false;
					}
				}
			}
		}
		
		return true;
	}

}
